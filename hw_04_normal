author = "Рекончишек Егор Сергеевич"
# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):
    f1 = 1
    f2 = 1
    i = 2
    fibonacci_sum1 = 0
    while i <= m:
        fibonacci_sum = f2 + f1
        f1 = f2
        f2 = fibonacci_sum
        i += 1
        if i == n-1:
            fibonacci_sum1 = fibonacci_sum

    return fibonacci_sum - fibonacci_sum1

print(fibonacci(0, 20))

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

def sort_to_max(origin_list):

    if len(origin_list) > 1:
        pivot_index = len(origin_list) // 2
        smaller_items = []
        larger_items = []

        for i, val in enumerate(origin_list):
            if i != pivot_index:
                if val < origin_list[pivot_index]:
                    smaller_items.append(val)
                else:
                    larger_items.append(val)

        sort_to_max(smaller_items)
        sort_to_max(larger_items)
        origin_list[:] = smaller_items + [origin_list[pivot_index]] + larger_items

    return origin_list

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

import random

def my_own_filter(function, spisok):

    filtered_spisok = []
    for i in spisok:
        print("Берём элемент {} из списка {}".format(i, spisok))
        if function(i) == True:
            print('Элемент {} подходит, дообавляем его в фильтрованный список {}'.format(i, filtered_spisok))
            filtered_spisok.append(i)
        else:
            print('Элемент {} не подходит'.format(i))

    print('Отфильтрованный список: {}'.format(filtered_spisok))

    return filtered_spisok

my_list = []
for i in range(10):
    my_list.append(random.randint(-10, 10))

print('Фильтруемый список {}'.format(my_list))

def my_condition(element):
    if element > 0:
        return True
    else:
        return False

result = my_own_filter(my_condition, my_list)
print('Ответ: ', result)

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

import math

A1 = [1, 2]
A2 = [3, 4]
A3 = [2, 1]
A4 = [4, 3]

B1 = [-3, -3]
B2 = [-1, 2]
B3 = [7, 4]
B4 = [5, -1]

C1 = [-4, -2]
C2 = [2, 2]
C3 = [6, 2]
C4 = [4, -2]


def is_paral(a1, a2, a3, a4):
    def cos_angle(b1, b2, b3):
        a = (b1[0] - b2[0]) * (b1[0] - b3[0]) + (b1[1] - b2[1]) * (b1[1] - b3[1])
        b = math.sqrt((b1[0] - b2[0]) ** 2 + (b1[1] - b2[1]) ** 2)
        c = math.sqrt((b1[0] - b3[0]) ** 2 + (b1[1] - b3[1]) ** 2)
        return a / (b * c)

    cos_a1 = cos_angle(a1, a2, a4)
    cos_a2 = cos_angle(a2, a3, a1)
    cos_a3 = cos_angle(a3, a4, a2)
    cos_a4 = cos_angle(a4, a3, a1)

    if cos_a1 == cos_a3 and cos_a2 == cos_a4 and (cos_a1 + cos_a2) == 0.0 and (cos_a3 + cos_a4) == 0.0:
        return True
    else:
        return False

print(is_paral(A1, A2, A3, A4))
print(is_paral(B1, B2, B3, B4))
print(is_paral(C1, C2, C3, C4))
